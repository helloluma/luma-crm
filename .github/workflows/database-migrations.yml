name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      migration_type:
        description: 'Migration type'
        required: true
        default: 'push'
        type: choice
        options:
          - push
          - reset
          - rollback
      confirm_production:
        description: 'Type "CONFIRM" to run on production'
        required: false
        type: string

jobs:
  validate-input:
    name: Validate Input
    runs-on: ubuntu-latest
    steps:
      - name: Validate production confirmation
        if: github.event.inputs.environment == 'production'
        run: |
          if [ "${{ github.event.inputs.confirm_production }}" != "CONFIRM" ]; then
            echo "❌ Production migrations require confirmation. Please type 'CONFIRM' in the confirm_production field."
            exit 1
          fi
          echo "✅ Production migration confirmed"

  run-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: validate-input
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_PROJECT_REF_PROD }}" >> $GITHUB_ENV
            echo "TARGET_ENV=production" >> $GITHUB_ENV
          else
            echo "SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_PROJECT_REF_STAGING }}" >> $GITHUB_ENV
            echo "TARGET_ENV=staging" >> $GITHUB_ENV
          fi

      - name: Link to Supabase project
        run: |
          supabase link --project-ref ${{ env.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Backup database (Production only)
        if: github.event.inputs.environment == 'production'
        run: |
          echo "Creating backup before migration..."
          supabase db dump --data-only > backup-$(date +%Y%m%d-%H%M%S).sql
          echo "Backup created successfully"

      - name: Run migration - Push
        if: github.event.inputs.migration_type == 'push'
        run: |
          echo "Pushing migrations to ${{ env.TARGET_ENV }}..."
          supabase db push
          echo "✅ Migrations pushed successfully"

      - name: Run migration - Reset
        if: github.event.inputs.migration_type == 'reset'
        run: |
          echo "⚠️  Resetting database on ${{ env.TARGET_ENV }}..."
          supabase db reset --linked
          echo "✅ Database reset completed"

      - name: Run migration - Rollback
        if: github.event.inputs.migration_type == 'rollback'
        run: |
          echo "Rolling back last migration on ${{ env.TARGET_ENV }}..."
          # This would require custom rollback logic
          echo "⚠️  Manual rollback required - check migration files"
          exit 1

      - name: Verify migration
        run: |
          echo "Verifying database state..."
          supabase db diff --linked
          echo "✅ Migration verification completed"

      - name: Run post-migration tests
        run: |
          echo "Running post-migration health checks..."
          # Add custom health check commands here
          echo "✅ Health checks passed"

      - name: Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ Database migration completed successfully!
            Environment: ${{ env.TARGET_ENV }}
            Type: ${{ github.event.inputs.migration_type }}
            Triggered by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Database migration failed!
            Environment: ${{ env.TARGET_ENV }}
            Type: ${{ github.event.inputs.migration_type }}
            Triggered by: ${{ github.actor }}
            Please check the logs and consider rollback if necessary.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}